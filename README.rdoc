= Bookle

Query Google Books[http://code.google.com/apis/books/] API[http://code.google.com/apis/books/docs/v1/using.html].


= How to use it

Require the gem:

<tt>require 'bookle'</tt>

Instantiate the API class:

<tt>api = Google::Books::API.new('my Google Books API key')</tt>

Set one of the searchable fields to a value:

<tt>api.subject = 'flowers'</tt>

Process the results:

<tt>api.volumes.each...</tt>

The original intent of the gem was to search by ISBN. To that effect a convenience instance variable has been created called <tt>volume</tt> that contains a volume/book object. If the instance variable is empty it could mean that either the search was unsuccessful or that Google's API returned more than one result for the same ISBN, which happened during testing, even thought the ISBNs didn't match.

The volume/book objects returned by Bookle have been endowed with a method called <tt>hash</tt>. This method returns a flat (one level) hash containing all values of the volume to help with the instantiation of book objects and/or assigning values to them. It can be used like this:

<tt>api.volume.hash</tt>


= Warning

The Google Books API is kind of "flaky" with the number of total volumes it reports back. While running tests I discovered that when queried multiple times with the same values the total count of volumes/books returned by the API varied. For example, searching for 'Flowers' in the Subject sometimes produced a total count of 165 volumes, other times 142, other times 107... This was even more apparent while paginating through the results. Take this into consideration while working with the returned results and do not base your logic on the number of volumes the API says it has, it very likely will not be accurate.


== Contact Info
 
I can be contacted at mailto:pepe.hipolito@gmail.com


== Contributing to Hasherizer
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet.
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it.
* Fork the project.
* Start a feature/bugfix branch.
* Commit and push until you are happy with your contribution.
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.


== Copyright

Copyright (c) 2012 Pepe Hipolito. MIT license. See LICENSE.txt for further details.
